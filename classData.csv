name	description	professor	examples	Tools
Data Visualization	"Data visualizations provide a visual setting in which to explore, understand, and explain datasets. This class describes mathematical and perceptual principles, methods, and applications of ""data visualization"" (as it is popularly understood to refer primarily to tabulated data). A range of data types and visual encodings will be presented and evaluated. Visualizations will be primarily web-based, using D3.js, and possibly other higher-level languages and libraries"	Gordon Kindlmann	[dataVis/p3#project 3: lil map n stuf][dataVis/p2#project 2: imitating an old visualization]	Javascript -D3.js Library, HTML
Introduction to Quantum Computing	This introduction to quantum computing will cover the key principles of quantum information science and how they relate to quantum computing as well as the notation and operations used in QIS. We will then take these building blocks and linear algebra principles to build up to several quantum algorithms and complete several quantum programs using a mainstream quantum programming language.	Diana Franklin, Kate Smith	[dataVis/p3#project 3: lil map n stuf][dataVis/p2#project 2: imitating an old visualization]	Java, Python -Qiskit Library
Quantum Computing Systems	Explored the design, optimization, and verification of the software and hardware involved in practical quantum computer systems. Introducing classical and quantum compiler techniques to optimize computations for technologies. Verification techniques to evaluate the correctness of quantum software and hardware were also explored.	Fred Chong		Python -Qiskit library
Computer Architecture	A survey of contemporary computer organization covering CPU design, instruction sets, control, processors, busses, ALU, memory, pipelined computers, multiprocessors, networking, and case studies. Special focus on the techniques of quantitative analysis and evaluation of modern computing systems, such as the selection of appropriate benchmarks to reveal and compare the performance of alternative design choices in system design. Emphasizing major component subsystems of high-performance computers: pipelining, instruction-level parallelism, memory hierarchies, input/output, and network-oriented interconnections.	Yanjing Li		C, Assembly
Advanced Networks	Advanced Netoworks targets a deep understanding of recent developments in networked systems, going beyond questions of what to why. We will discuss a wide range of systems and protocols, from large-scale decentralized systems (e.g. p2p), anonymous communications, botnets/worms, social networks, streaming services, to data centers, various types of mobile networks (e.g. cellular, WiFi, bluetooth) and IoT systems. Aside from regular lectures, nothing beats the first hand experience of building networking protocols and applications from the ground up. Thus 23360 students will build a range (2-3) of networking projects ranging widely in complexity.	Heather Zhang		HTML, Python, Bash
Computer Security	This course introduces the principles and practice of computer security. It aims to teach how to model threats to computer systems and how to think like a potential attacker. It presents standard cryptographic functions and protocols and gives an overview of threats and defenses for software, host systems, networks, and the Web. It also touches on some of the legal, policy, and ethical issues surrounding computer security in areas such as privacy, surveillance, and the disclosure of security vulnerabilities. The goal of this course is to provide a foundation for further study in computer security and to help better understand how to design, build, and use computer systems more securely.	Blase Ur, David Cash		HTML, Python, C, Javascript, Assembly
Type Theory	Church's λ-calculus, β-reduction, the Church-Rosser theorem. Simple type theory, strong normalization. The Barendregt cube of type theories. Dependent types. The Curry-Howard Isomorphism. Formal constructive mathematics.	Stuart Kurtz		Pie, Haskell, Agda, 
Scientific Visualization	Scientific visualization combines computer graphics, numerical methods, and mathematical models of the physical world to create a visual framework for understanding and solving scientific problems. The mathematical and algorithmic foundations of scientific visualization (for example, scalar, vector, and tensor fields) will be explained in the context of real-world data from scientific and biomedical domains. The course is also intended for students outside computer science who are experienced with programming and computing with scientific data. Programming projects will be in C and C++.	Gordon Kindlmann		C
Parallel Computing	This course provides an introduction to the concepts of parallel programming, with an emphasis on programming multicore processors. Topics include: Processes and threads, shared memory, message passing, direct-memory access (DMA), hardware mechanisms for parallel computing, synchronization and communication, patterns of parallel programming. The course will involve a substantial programming project implementing a parallel computations.	Hank Hoffmann		C
Other	This list ignores mathematics for computer science classes and introductory CS classes, which placed more of a value on pure algorithms. These classes mostly were taught in C and Assembly, when programming was used.	Functional Programming, Data Structures and Algorithms, Computer Systems, Discrete Mathematics, Theory of Algorithms, Graph Theory		
