name	description	professor	examples	tools
Data Visualization	"Data visualizations provides a visual setting in which to explore, understand, and explain datasets. This class describes mathematical and perceptual principles, methods, and applications of ""data visualization"" (as it is popularly understood to refer primarily to tabulated data). A range of data types and visual encodings are presented and evaluated. Visualizations are primarily web-based, using D3.js, and other higher-level languages and libraries."	Gordon Kindlmann	[dataVis/p2.zip#Imitating a visualization by Florence Nightingale. Work in index.html and p2.js#dataVis/p2][dataVis/p3.zip#Displays US election results across years. Uses multiple methods for displaying results. Click hex or hover over tick mark for additional functionality. Some bugs in Firefox，but none known in Edge，Chrome，and Safari. Work in index.html and p3.js#dataVis/p3]	Javascript -D3.js Library, HTML
Introduction to Quantum Computing	This introduction to quantum computing covers the key principles of quantum information science (QIS) and how they relate to quantum computing, as well as the notation and operations used in QIS. These building blocks, alongside linear algebra principles, are used to to build up to several quantum algorithms and complete several quantum programs using a mainstream quantum programming language.	Diana Franklin, Kate Smith	[introQuantum/project4.zip#Full quantum simulator，able to recognize and give results for standard quantum gates and oracles，regardless of the number of qubits involved in the interaction.]	Java, Python -Qiskit Library
Quantum Computing Systems	An exploration of the design, optimization, and verification of the software and hardware involved in practical quantum computer systems. Also introduces classical and quantum compiler techniques to optimize computations for technologies. Verification techniques to evaluate the correctness of quantum software and hardware were also explored.	Fred Chong	[systemsQuantum/ps05.zip#Python implementation of an algorithm to decide logical qubit placement given some architecture and some program (Part 1)，an algorithm for routing disconnected qubits  which need to interact towards one another and back to their original places (Part 2)，and an algorithm for scheduling gates to maximize parallelism (Part 3).][systemsQuantum/ps06.zip#Python program for noise-aware scheduling of quantum algorithms，so as to minimize the impact of multi-qubit gates on one another，and the resultant decoherence.]	Python -Qiskit library
Computer Architecture	A survey of contemporary computer organization covering CPU design, instruction sets, control, processors, busses, ALU, memory, pipelined computers, multiprocessors, networking, and case studies. Special focus on the techniques of quantitative analysis and evaluation of modern computing systems, such as the selection of appropriate benchmarks to reveal and compare the performance of alternative design choices in system design. Emphasizing major component subsystems of high-performance computers: pipelining, instruction-level parallelism, memory hierarchies, input/output, and network-oriented interconnections.	Yanjing Li	[computerArch/project1.zip#ARM instruction set simulator.]	C, Assembly
Advanced Networks	Advanced Netoworks targets a deep understanding of recent developments in networked systems, going beyond questions of what to why. Discussions went over a wide range of systems and protocols, from large-scale decentralized systems (e.g. p2p), anonymous communications, botnets/worms, social networks, streaming services, to data centers, various types of mobile networks (e.g. cellular, WiFi, bluetooth) and IoT systems.	Heather Zhang	[advancedNetworks/project1.zip#Bash and Python-based project，storing network data over the course of a week for given website accesses and API calls. Also encodes data into usable CSV format.][advancedNetworks/project2.zip#Python-based partner project for analyzing network latency results found in previous example. Interprets whether E2E latency is consistent within given periods，finds network bottlenecks，and interprets API call latency depending on the website being accessed. Also implements a random-forest based machine learning model to predict network latency for ping and API calls]	HTML, Python, Bash
Computer Security	This course introduces the principles and practice of computer security. It aims to teach how to model threats to computer systems and how to think like a potential attacker. It presents standard cryptographic functions and protocols and gives an overview of threats and defenses for software, host systems, networks, and the Web. It also touches on some of the legal, policy, and ethical issues surrounding computer security in areas such as privacy, surveillance, and the disclosure of security vulnerabilities. This course provides a foundation for further study in computer security and to help better understand how to design, build, and use computer systems more securely.	Blase Ur, David Cash	[security/project8.zip#Part 1 is able to attach names to anonymized data，given that no Differential Privacy technique is used. Part 2 adds noise to data using the laplace mechanism.]	HTML, Python, C, Javascript, php, Assembly
Type Theory	This course discusses Church's λ-calculus, β-reduction, the Church-Rosser theorem, simple type theory, strong normalization, the Barendregt cube of type theories, dependent types, the Curry-Howard Isomorphism, and formal constructive mathematics, in order to introduce students to type theory and its applications in computation.	Stuart Kurtz		Pie, Haskell, Agda, 
Scientific Visualization	Scientific visualization combines computer graphics, numerical methods, and mathematical models of the physical world to create a visual framework for understanding and solving scientific problems. The mathematical and algorithmic foundations of scientific visualization (for example, scalar, vector, and tensor fields) are explained in the context of real-world data from scientific and biomedical domains. 	Gordon Kindlmann		C
Parallel Computing	This course provides an introduction to the concepts of parallel programming, with an emphasis on programming multicore processors. Topics include: Processes and threads, shared memory, message passing, direct-memory access (DMA), hardware mechanisms for parallel computing, synchronization and communication, patterns of parallel programming. 	Hank Hoffmann	[parallel/project.zip#Parallelization of the Floyd Warshall Algorithm，producing significant speedup. Brunt of the work in generator.c，parallel.c，and serial.c]	C
Other	This list ignores mathematics for computer science classes and introductory CS classes, which placed more of a value on pure algorithms. These classes mostly were taught in C and Assembly, when programming was used.	Functional Programming, Data Structures and Algorithms, Computer Systems, Discrete Mathematics, Theory of Algorithms, Graph Theory		
